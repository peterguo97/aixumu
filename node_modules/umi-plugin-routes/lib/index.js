"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _assert = _interopRequireDefault(require("assert"));

var _isPlainObject = _interopRequireDefault(require("is-plain-object"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function optsToArray(item) {
  if (!item) return [];

  if (Array.isArray(item)) {
    return item;
  } else {
    return [item];
  }
}

function exclude(routes, excludes, winPath) {
  return routes.filter(route => {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = excludes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        const exclude = _step.value;

        if (typeof exclude === 'function' && exclude(route)) {
          return false;
        }

        if (!route.component.startsWith('() =>') && exclude instanceof RegExp && exclude.test(winPath(route.component))) {
          return false;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (route.routes) {
      route.routes = exclude(route.routes, excludes, winPath);
    }

    return true;
  });
}

function _default(api, opts) {
  const winPath = api.utils.winPath;
  api.register('modifyRoutes', ({
    memo
  }) => {
    // opts.exclude
    memo = exclude(memo, optsToArray(opts.exclude), winPath); // opts.include

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = optsToArray(opts.include)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        const include = _step2.value;

        if ((0, _isPlainObject.default)(include)) {
          memo = [...memo, include];
        }

        if (typeof include === 'string') {
          throw new Error('opts.include with string not support, please wait for next version.');
        }
      } // opts.update

    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    if (opts.update) {
      (0, _assert.default)(typeof opts.update === 'function', `opts.update should be function, but got ${opts.update}`);
      memo = opts.update(memo);
    }

    return memo;
  });
}