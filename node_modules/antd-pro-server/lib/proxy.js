'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mockjs = require('mockjs');

var _require = require('./rule'),
    getRule = _require.getRule,
    postRule = _require.postRule;

var _require2 = require('./api'),
    getActivities = _require2.getActivities,
    getNotice = _require2.getNotice,
    getFakeList = _require2.getFakeList;

var _require3 = require('./chart'),
    getFakeChartData = _require3.getFakeChartData;

var _require4 = require('./profile'),
    getProfileBasicData = _require4.getProfileBasicData;

var _require5 = require('./profile'),
    getProfileAdvancedData = _require5.getProfileAdvancedData;

var _require6 = require('./notices'),
    getNotices = _require6.getNotices;

var _require7 = require('../utils/roadhog-api-doc-util'),
    format = _require7.format,
    delay = _require7.delay;

// 代码中会兼容本地 service mock 以及部署站点的静态数据


var proxy = {
  // 支持值为 Object 和 Array
  'GET /api/currentUser': {
    $desc: '获取当前用户接口',
    $params: {
      pageSize: {
        desc: '分页',
        exp: 2
      }
    },
    $body: {
      name: 'Serati Ma',
      avatar: 'https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png',
      userid: '00000001',
      notifyCount: 12
    }
  },
  // GET POST 可省略
  'GET /api/users': [{
    key: '1',
    name: 'John Brown',
    age: 32,
    address: 'New York No. 1 Lake Park'
  }, {
    key: '2',
    name: 'Jim Green',
    age: 42,
    address: 'London No. 1 Lake Park'
  }, {
    key: '3',
    name: 'Joe Black',
    age: 32,
    address: 'Sidney No. 1 Lake Park'
  }],
  'GET /api/project/notice': getNotice,
  'GET /api/activities': getActivities,
  'GET /api/rule': getRule,
  'POST /api/rule': {
    $params: {
      pageSize: {
        desc: '分页',
        exp: 2
      }
    },
    $body: postRule
  },
  'POST /api/forms': function POSTApiForms(req, res) {
    res.send({ message: 'Ok' });
  },
  'GET /api/tags': mockjs.mock({
    'list|100': [{ name: '@city', 'value|1-100': 150, 'type|0-2': 1 }]
  }),
  'GET /api/fake_list': getFakeList,
  'GET /api/fake_chart_data': getFakeChartData,
  'GET /api/profile/basic': getProfileBasicData,
  'GET /api/profile/advanced': getProfileAdvancedData,
  'POST /api/login/account': function POSTApiLoginAccount(req, res) {
    var _req$body = req.body,
        password = _req$body.password,
        userName = _req$body.userName,
        type = _req$body.type;

    if (password === '888888' && userName === 'admin') {
      res.send({
        status: 'ok',
        type: type,
        currentAuthority: 'admin'
      });
      return;
    }
    if (password === '123456' && userName === 'user') {
      res.send({
        status: 'ok',
        type: type,
        currentAuthority: 'user'
      });
      return;
    }
    res.send({
      status: 'error',
      type: type,
      currentAuthority: 'guest'
    });
  },
  'POST /api/register': function POSTApiRegister(req, res) {
    res.send({ status: 'ok', currentAuthority: 'user' });
  },
  'GET /api/notices': getNotices,
  'GET /api/500': function GETApi500(req, res) {
    res.status(500).send({
      timestamp: 1513932555104,
      status: 500,
      error: 'error',
      message: 'error',
      path: '/base/category/list'
    });
  },
  'GET /api/404': function GETApi404(req, res) {
    res.status(404).send({
      timestamp: 1513932643431,
      status: 404,
      error: 'Not Found',
      message: 'No message available',
      path: '/base/category/list/2121212'
    });
  },
  'GET /api/403': function GETApi403(req, res) {
    res.status(403).send({
      timestamp: 1513932555104,
      status: 403,
      error: 'Unauthorized',
      message: 'Unauthorized',
      path: '/base/category/list'
    });
  },
  'GET /api/401': function GETApi401(req, res) {
    res.status(401).send({
      timestamp: 1513932555104,
      status: 401,
      error: 'Unauthorized',
      message: 'Unauthorized',
      path: '/base/category/list'
    });
  }
};
// console.log(proxy);
var proxyEnd = delay(proxy, 1000);
var mockData = proxyEnd.__mockData;
// console.log(proxyEnd);
var resData = {
  GET: {},
  POST: {}
};
(0, _keys2.default)(mockData).forEach(function (key) {
  var request = key.split(' ');
  var Method = request[0];
  var ResBody = proxy[key];
  var URL = request[1];
  resData[Method][URL] = ResBody;
  // switch(Method){
  //     case 'GET':
  //     resData[Method][URL] = ResBody;
  //     console.log(URL);
  //     router.get(URL, async(ctx)=>{
  //         await ctx.render(URL, ResBody);
  //     })
  //     break;
  //     case 'POST':
  //         router.post(URL, async()=>{
  //             const post = ctx.request.body;
  //   const id = posts.push(post) - 1;
  //   post.created_at = new Date();
  //   post.id = id;
  //   ctx.redirect('/');
  //         })
  // break;
  // default:
  // break;
  // }
});

module.exports = { resData: resData, proxyEnd: proxyEnd };